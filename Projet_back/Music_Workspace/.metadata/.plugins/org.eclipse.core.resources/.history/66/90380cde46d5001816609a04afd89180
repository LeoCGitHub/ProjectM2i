package com.music;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/music")
public class MusicController {
	@Autowired
	MockRepository mr;

	// Afficher toutes les musiques
	@GetMapping
	public List<MusicDto> getAllOld() {
		return mr.getAll();
	}
	//affiche les musiques by id
	@GetMapping("/{id}")
	public MusicDto getById(@PathVariable int id) {
		return mr.get(id);
	}
	//création d'une musique
	@PostMapping(value = "/")
	public int createMusic(@RequestBody MusicDto music) throws Exception {
		if (mr.get(music.id) != null) { // verifie que la musique existe via l'id
			throw new Exception("Music already existing");
		}
		mr.add(music); // ajoute la musique a la hashmap
		return music.id;
	}
	//u
	@PutMapping(value = "/{id}")
	public int updateTodoListold(@RequestBody MusicDto music) throws Exception {
		if (mr.get(music.id) == null) { 										// verifie que la liste avec l'id existe
			throw new Exception("Music doesn't exist");
		}
		mr.add(music); // ajoute la musique modifiée (ou non) à la hashmap return list.id;
		return music.id;
	}
	
//	@DeleteMapping("/{id}/")
//	public boolean deleteMusic(@PathVariable("idMusic") int idMusic) throws Exception {
//		if (mr.get(idMusic) == null) {
//			throw new Exception("Music doesn't exist"); 		// permet de tester si l'id de la todolist n'est pas nul
//		}
//		MusicDto music = mr.get(idMusic); 		// si la todolist existe, création d'une nouvelle task
//		//task.id = idTask; 										// on attribut à cette nouvelle task l'id de la task de l'url (donc la task
//																// complete)
//
//		if (music != null) {
//			return mr.get(idMusic).remove(music); 			// si la task n'est pas nulle (vide), alors "supprimer la task",
//																// de l'objet task de la todolist, qui possède l'id de la
//																// todolist demandée
//		} else {
//			throw new Exception("Can't delete");
//		}
//	}
	
}

// ici seront les différentes requetes
// @GetMapping("/old")
// @PostMapping("/{id}" => afficher par id
// @DeleteMapping
// @PutMapping
